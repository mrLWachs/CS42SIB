
/** required package class namespace */
package testing.cs30s;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JColorChooser;
import javax.swing.JRadioButton;
import javax.swing.SpinnerNumberModel;
import javax.swing.Timer;

/**
 * Graphics5.java - description here...
 *
 * @author lawrence.wachs 
 * @since Dec 15, 2017 
 * @instructor Mr. Wachs
 */
public class Graphics5 extends javax.swing.JFrame 
{
    //constants
    private final int MIN    = 2;
    private final int MAX    = 200;
    private final int CHANGE = 5;    
    private final String[] BRUSHES = {
        "filledOval",
        "openOval",
        "filledRectangle",
        "openRectangle",
        "3DRectangle",
        "arc"
    };
            
    // variables
    private String             brush;
    private int                size;
    private int                currentX;
    private int                currentY;
    private Color              foreground;
    private Color              background;
    private Graphics           graphics;
    private SpinnerNumberModel model;
    private Timer              timer;
    
    
    private void setRadios(JRadioButton radio) {
        filledOval.setSelected(false);
        openOval.setSelected(false);
        filledRectangle.setSelected(false);
        openRectangle.setSelected(false);
        threeDRectangle.setSelected(false);
        arc.setSelected(false);
        radio.setSelected(true);
    }
    
    private void tick() {
        
        final int SPACE = (int)((20d-5d+1d)*Math.random()+5d);
        final int POINTS = 10;
        
        int w = drawArea.getWidth()  - SPACE * 5;
        int h = drawArea.getHeight() - SPACE * 5;
        
        currentX = (int)((w-SPACE+1d)*Math.random()+SPACE);
        currentY = (int)((h-SPACE+1d)*Math.random()+SPACE);
        
        int x1  = currentX;
        int x2  = x1 + SPACE;
        int x3  = x2 + SPACE;
        int x4  = x3 + SPACE;
        int x5  = x4 + SPACE;
        int x6  = x5 - SPACE;
        int x7  = x6 + SPACE;
        int x8  = x7 - SPACE * 2;
        int x9  = x8 - SPACE * 2;
        int x10 = x9 + SPACE;
                
        int y1  = currentY;
        int y2  = y1;
        int y3  = y2 - SPACE;
        int y4  = y3 + SPACE;
        int y5  = y4;
        int y6  = y5 + SPACE;
        int y7  = y6 + SPACE * 2;
        int y8  = y7 - SPACE;
        int y9  = y8 + SPACE;
        int y10 = y9 - SPACE * 2;
        
        int[] xPoints = {x1,x2,x3,x4,x5,x6,x7,x8,x9,x10};
        int[] yPoints = {y1,y2,y3,y4,y5,y6,y7,y8,y9,y10};
        
        int r = (int)((255d-0d+1d)*Math.random()+0d);
        int g = (int)((255d-0d+1d)*Math.random()+0d);
        int b = (int)((255d-0d+1d)*Math.random()+0d);
        
        Color color = new Color(r,g,b);
        Polygon polygon = new Polygon(xPoints, yPoints, POINTS);
        graphics.setColor(color);
        graphics.fillPolygon(polygon);
    }
    
    
    /**  Default constructor for the class, creates new form Graphics5 */
    public Graphics5() {
        initComponents();        
        filledOval.setSelected(true);        
        timer = new Timer(100, new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                tick();
            }
        });        
        brush      = BRUSHES[0];
        size       = MIN;
        currentX   = 10;
        currentY   = 10;
        foreground = Color.black;
        background = Color.white;
        graphics   = drawArea.getGraphics();
        model = (SpinnerNumberModel)brushSize.getModel();        
        model.setMinimum(MIN);
        model.setMaximum(MAX);
        model.setStepSize(CHANGE);
        model.setValue(size);        
        graphics.setColor(foreground);
        drawArea.setBackground(background);        
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Drawing Program");
        setVisible(true);
    }

    /** 
     * NETBEANS EDITOR GENERATED CODE:
     * 
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filledOval = new javax.swing.JRadioButton();
        openOval = new javax.swing.JRadioButton();
        filledRectangle = new javax.swing.JRadioButton();
        openRectangle = new javax.swing.JRadioButton();
        threeDRectangle = new javax.swing.JRadioButton();
        arc = new javax.swing.JRadioButton();
        brushText = new javax.swing.JLabel();
        brushSize = new javax.swing.JSpinner();
        foregroundColor = new javax.swing.JButton();
        backgroundColor = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        starBurst = new javax.swing.JButton();
        drawArea = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        filledOval.setText("Filled Oval");
        filledOval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filledOvalActionPerformed(evt);
            }
        });

        openOval.setText("Open Oval");
        openOval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openOvalActionPerformed(evt);
            }
        });

        filledRectangle.setText("Filled Rectangle");
        filledRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filledRectangleActionPerformed(evt);
            }
        });

        openRectangle.setText("Open Rectangle");
        openRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openRectangleActionPerformed(evt);
            }
        });

        threeDRectangle.setText("3D Rectangle");
        threeDRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeDRectangleActionPerformed(evt);
            }
        });

        arc.setText("Arc");
        arc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arcActionPerformed(evt);
            }
        });

        brushText.setText("Brush Size:");

        brushSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brushSizeStateChanged(evt);
            }
        });

        foregroundColor.setText("Foreground Color");
        foregroundColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foregroundColorActionPerformed(evt);
            }
        });

        backgroundColor.setText("Background Color");
        backgroundColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundColorActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        starBurst.setText("Star Burst");
        starBurst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starBurstActionPerformed(evt);
            }
        });

        drawArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        drawArea.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawAreaMouseDragged(evt);
            }
        });
        drawArea.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                drawAreaMouseWheelMoved(evt);
            }
        });

        javax.swing.GroupLayout drawAreaLayout = new javax.swing.GroupLayout(drawArea);
        drawArea.setLayout(drawAreaLayout);
        drawAreaLayout.setHorizontalGroup(
            drawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
        );
        drawAreaLayout.setVerticalGroup(
            drawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(threeDRectangle)
                    .addComponent(arc)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(brushText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(brushSize, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filledOval)
                    .addComponent(openOval)
                    .addComponent(filledRectangle)
                    .addComponent(openRectangle)
                    .addComponent(foregroundColor, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(backgroundColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(starBurst, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(drawArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(filledOval)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(openOval)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filledRectangle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(openRectangle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(threeDRectangle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(arc)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brushText)
                    .addComponent(brushSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(foregroundColor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backgroundColor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(starBurst)
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drawArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filledOvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filledOvalActionPerformed
        timer.stop();
        brush = BRUSHES[0];
        setRadios(filledOval);
    }//GEN-LAST:event_filledOvalActionPerformed

    private void openOvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openOvalActionPerformed
        timer.stop();
        brush = BRUSHES[1];
        setRadios(openOval);
    }//GEN-LAST:event_openOvalActionPerformed

    private void filledRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filledRectangleActionPerformed
        timer.stop();
        brush = BRUSHES[2];
        setRadios(filledRectangle);
    }//GEN-LAST:event_filledRectangleActionPerformed

    private void openRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRectangleActionPerformed
        timer.stop();
        brush = BRUSHES[3];
        setRadios(openRectangle);
    }//GEN-LAST:event_openRectangleActionPerformed

    private void threeDRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeDRectangleActionPerformed
        timer.stop();
        brush = BRUSHES[4];
        setRadios(threeDRectangle);
    }//GEN-LAST:event_threeDRectangleActionPerformed

    private void arcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arcActionPerformed
        timer.stop();
        brush = BRUSHES[5];
        setRadios(arc);
    }//GEN-LAST:event_arcActionPerformed

    private void foregroundColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foregroundColorActionPerformed
        timer.stop();
        foreground = JColorChooser.showDialog(this, 
                "Choose Foreground color", foreground);
        if (foreground == null) foreground = Color.black;
        graphics.setColor(foreground);
    }//GEN-LAST:event_foregroundColorActionPerformed

    private void backgroundColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundColorActionPerformed
        timer.stop();
        background = JColorChooser.showDialog(this, 
                "Choose background color", background);
        if (background == null) background = Color.white;
        drawArea.setBackground(background);
    }//GEN-LAST:event_backgroundColorActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
       timer.stop();       
       drawArea.repaint();
    }//GEN-LAST:event_clearActionPerformed

    private void starBurstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starBurstActionPerformed
        drawArea.repaint();
        timer.start();
    }//GEN-LAST:event_starBurstActionPerformed

    private void drawAreaMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawAreaMouseDragged
        timer.stop();        
        int x = evt.getX() - (size/2);
        int y = evt.getY() - (size/2);        
        if (brush.equals(BRUSHES[0])) {
            graphics.fillOval(x, y, size, size);
        }
        else if (brush.equals(BRUSHES[1])) {
            graphics.drawOval(x, y, size, size);
        }
        else if (brush.equals(BRUSHES[2])) {
            graphics.fillRect(x, y, size, size);
        }
        else if (brush.equals(BRUSHES[3])) {
            graphics.drawRect(x, y, size, size);
        }
        else if (brush.equals(BRUSHES[4])) {
            graphics.fill3DRect(x, y, size, size, true);
        }
        else if (brush.equals(BRUSHES[5])) {
            graphics.drawArc(x, y, size, size, 45, 120);
        }
    }//GEN-LAST:event_drawAreaMouseDragged

    private void drawAreaMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_drawAreaMouseWheelMoved
        timer.stop();        
        if (evt.getWheelRotation() < 0) size += CHANGE;
        else                            size -= CHANGE;
        if (size < MIN) size = MIN;
        if (size > MAX) size = MAX;
        model.setValue(size);        
    }//GEN-LAST:event_drawAreaMouseWheelMoved

    private void brushSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brushSizeStateChanged
        timer.stop();
        size = (Integer)model.getNumber();
    }//GEN-LAST:event_brushSizeStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton arc;
    private javax.swing.JButton backgroundColor;
    private javax.swing.JSpinner brushSize;
    private javax.swing.JLabel brushText;
    private javax.swing.JButton clear;
    private javax.swing.JPanel drawArea;
    private javax.swing.JRadioButton filledOval;
    private javax.swing.JRadioButton filledRectangle;
    private javax.swing.JButton foregroundColor;
    private javax.swing.JRadioButton openOval;
    private javax.swing.JRadioButton openRectangle;
    private javax.swing.JButton starBurst;
    private javax.swing.JRadioButton threeDRectangle;
    // End of variables declaration//GEN-END:variables

}
